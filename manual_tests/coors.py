# import the necessary packages
import pdb
import requests
from random import randrange 
import numpy as np
import argparse
import cv2
import time
# construct the argument parse and parse the arguments
# ap = argparse.ArgumentParser()
# ap.add_argument("-i", "--image", help = "path to the image file")
# ap.add_argument("-r", "--radius", type = int,
# 	help = "radius of Gaussian blur; must be odd")
# args = vars(ap.parse_args())
# # load the image and convert it to grayscale
# image = cv2.imread(args["image"])
#orig = image.copy()
#gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
# perform a naive attempt to find the (x, y) coordinates of
# # the area of the image with the largest intensity value
# (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(gray)
# cv2.circle(image, maxLoc, 5, (255, 0, 0), 2)
# # display the results of the naive attempt
# cv2.imshow("Naive", image)
# # apply a Gaussian blur to the image then find the brightest
# # region
HOST = 'http://192.168.2.132:4000'
COUNT = 300

def on(index, color="#FFFFFFFF"):
    requests.post(HOST + '/modes/set/' + str(index), {'color': color})

def off(index):
    requests.delete(HOST + '/modes/set/' + str(index))

def capture():
    cam = cv2.VideoCapture(0)
    ret, image = cam.read()
    cam.release()
    return image

def read_coors():
    off('') # turn off all LEDs
    data = []
    for i in range(0, COUNT):
        on(i) # turn on LED #i
        image = capture() #from camera
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) # make the image grayscale
        #gray = cv2.GaussianBlur(gray, (25, 20), 0)
        (minVal, maxVal, minLoc, maxLoc) = cv2.minMaxLoc(gray) # find the brightest point
        # cv2.circle(image, maxLoc, 20, (255, 0, 0), 5) # draw a circle around that point for debugging
        print(maxLoc)
        #cv2.imshow("Robust", image) # show captured image for debugging
        #cv2.waitKey(0)
        off(i) # turn off LED #i
        data.append((i,maxLoc))
    return data

COORS = [(0, (272, 408)), (1, (0, 0)), (2, (0, 0)), (3, (0, 0)), (4, (0, 0)), (5, (216, 385)), (6, (211, 375)), (7, (208, 365)), (8, (210, 352)), (9, (214, 339)), (10, (215, 326)), (11, (220, 311)), (12, (219, 296)), (13, (224, 280)), (14, (232, 263)), (15, (238, 247)), (16, (247, 229)), (17, (258, 211)), (18, (270, 193)), (19, (293, 184)), (20, (315, 186)), (21, (337, 189)), (22, (351, 200)), (23, (0, 0)), (24, (0, 0)), (25, (424, 205)), (26, (446, 210)), (27, (468, 215)), (28, (0, 0)), (29, (514, 224)), (30, (537, 230)), (31, (561, 238)), (32, (582, 239)), (33, (621, 278)), (34, (625, 251)), (35, (646, 255)), (36, (0, 0)), (37, (688, 266)), (38, (0, 0)), (39, (0, 0)), (40, (0, 0)), (41, (0, 0)), (42, (0, 0)), (43, (0, 0)), (44, (0, 0)), (45, (840, 299)), (46, (836, 298)), (47, (818, 299)), (48, (795, 302)), (49, (776, 302)), (50, (753, 304)), (51, (732, 305)), (52, (709, 305)), (53, (688, 306)), (54, (665, 309)), (55, (643, 312)), (56, (621, 309)), (57, (599, 311)), (58, (574, 311)), (59, (552, 311)), (60, (527, 311)), (61, (506, 311)), (62, (481, 311)), (63, (457, 314)), (64, (432, 315)), (65, (404, 316)), (66, (381, 317)), (67, (359, 318)), (68, (0, 0)), (69, (0, 0)), (70, (0, 0)), (71, (414, 330)), (72, (415, 337)), (73, (407, 345)), (74, (385, 351)), (75, (364, 365)), (76, (362, 373)), (77, (362, 404)), (78, (0, 0)), (79, (0, 0)), (80, (0, 0)), (81, (430, 411)), (82, (453, 419)), (83, (474, 427)), (84, (0, 0)), (85, (516, 443)), (86, (0, 0)), (87, (0, 0)), (88, (0, 0)), (89, (648, 252)), (90, (632, 257)), (91, (0, 0)), (92, (0, 0)), (93, (0, 0)), (94, (0, 0)), (95, (0, 0)), (96, (0, 0)), (97, (793, 506)), (98, (780, 517)), (99, (0, 0)), (100, (0, 0)), (101, (0, 0)), (102, (0, 0)), (103, (827, 515)), (104, (808, 511)), (105, (786, 507)), (106, (767, 502)), (107, (748, 497)), (108, (726, 493)), (109, (707, 486)), (110, (684, 486)), (111, (662, 482)), (112, (642, 476)), (113, (615, 471)), (114, (594, 466)), (115, (571, 461)), (116, (549, 456)), (117, (527, 448)), (118, (504, 443)), (119, (482, 439)), (120, (457, 434)), (121, (433, 429)), (122, (410, 423)), (123, (387, 417)), (124, (365, 411)), (125, (356, 405)), (126, (0, 0)), (127, (0, 0)), (128, (0, 0)), (129, (0, 0)), (130, (415, 373)), (131, (405, 368)), (132, (382, 362)), (133, (358, 354)), (134, (346, 351)), (135, (0, 0)), (136, (0, 0)), (137, (0, 0)), (138, (0, 0)), (139, (0, 0)), (140, (0, 0)), (141, (0, 0)), (142, (0, 0)), (143, (501, 303)), (144, (538, 297)), (145, (558, 291)), (146, (578, 284)), (147, (614, 251)), (148, (612, 248)), (149, (638, 263)), (150, (661, 256)), (151, (680, 249)), (152, (0, 0)), (153, (720, 236)), (154, (741, 230)), (155, (761, 226)), (156, (779, 220)), (157, (0, 0)), (158, (824, 201)), (159, (828, 203)), (160, (835, 191)), (161, (825, 176)), (162, (806, 168)), (163, (784, 171)), (164, (764, 175)), (165, (741, 181)), (166, (719, 186)), (167, (698, 191)), (168, (677, 194)), (169, (654, 200)), (170, (634, 206)), (171, (612, 212)), (172, (590, 217)), (173, (568, 222)), (174, (546, 227)), (175, (522, 233)), (176, (500, 238)), (177, (478, 243)), (178, (454, 249)), (179, (432, 254)), (180, (410, 260)), (181, (387, 266)), (182, (365, 271)), (183, (347, 282)), (184, (346, 294)), (185, (0, 0)), (186, (0, 0)), (187, (0, 0)), (188, (417, 307)), (189, (0, 0)), (190, (0, 0)), (191, (0, 0)), (192, (507, 333)), (193, (501, 342)), (194, (549, 348)), (195, (570, 355)), (196, (0, 0)), (197, (614, 372)), (198, (613, 377)), (199, (654, 386)), (200, (673, 393)), (201, (694, 401)), (202, (0, 0)), (203, (733, 410)), (204, (751, 417)), (205, (770, 424)), (206, (780, 449)), (207, (0, 0)), (208, (824, 446)), (209, (0, 0)), (210, (832, 459)), (211, (818, 465)), (212, (793, 468)), (213, (772, 473)), (214, (753, 477)), (215, (732, 480)), (216, (713, 484)), (217, (691, 492)), (218, (669, 495)), (219, (648, 499)), (220, (627, 503)), (221, (605, 510)), (222, (585, 514)), (223, (562, 519)), (224, (541, 523)), (225, (519, 527)), (226, (497, 531)), (227, (476, 535)), (228, (453, 539)), (229, (431, 543)), (230, (408, 548)), (231, (386, 551)), (232, (365, 555)), (233, (0, 0)), (234, (0, 0)), (235, (0, 0)), (236, (0, 0)), (237, (457, 328)), (238, (448, 564)), (239, (464, 567)), (240, (478, 572)), (241, (498, 579)), (242, (513, 592)), (243, (532, 604)), (244, (550, 617)), (245, (565, 630)), (246, (583, 643)), (247, (600, 656)), (248, (616, 668)), (249, (633, 681)), (250, (651, 693)), (251, (668, 705)), (252, (683, 718)), (253, (700, 730)), (254, (717, 742)), (255, (733, 754)), (256, (748, 766)), (257, (767, 777)), (258, (782, 789)), (259, (800, 800)), (260, (814, 812)), (261, (825, 824)), (262, (0, 0)), (263, (0, 0)), (264, (0, 0)), (265, (0, 0)), (266, (0, 0)), (267, (0, 0)), (268, (0, 0)), (269, (0, 0)), (270, (0, 0)), (271, (829, 830)), (272, (818, 838)), (273, (799, 842)), (274, (778, 845)), (275, (756, 848)), (276, (736, 852)), (277, (714, 854)), (278, (694, 858)), (279, (672, 859)), (280, (652, 858)), (281, (632, 858)), (282, (612, 858)), (283, (589, 859)), (284, (566, 860)), (285, (547, 860)), (286, (525, 861)), (287, (502, 862)), (288, (482, 862)), (289, (460, 863)), (290, (437, 865)), (291, (415, 866)), (292, (392, 868)), (293, (369, 868)), (294, (0, 0)), (295, (0, 0)), (296, (0, 0)), (297, (0, 0)), (298, (0, 0)), (299, (879, 668))]

def fx(x):
    return format(x, 'x').zfill(2)

def color(r, g, b, w):
    return f"#{fx(r)}{fx(g)}{fx(b)}{fx(w)}"

def rcomp():
    return randrange(255)
def rcolor():
    return color(rcomp(), rcomp(), rcomp(), 255)

def group_by(data, comp):
    values = set(map(lambda x:x[1][comp], data))
    grouped = [[y for y in data if y[1][comp]==x] for x in values]
    return sorted(grouped, key=lambda coor: coor[0][1][comp])

def on_sorted():
    off('')
    no_zero = list( filter(lambda x: x[1] != (0, 0), COORS))
    xs = group_by(no_zero, 0) # 0 means x
    ys = group_by(no_zero, 1) # 1 means y

    pdb.set_trace()
    print(list(y[0] for y in x for x in xs))

    # while True:
    #     for group in ys:
    #         for led in group:
    #             on(led[0], rcolor())
    #             # on(led[0], '#aa4400ff')

    #     for group in ys:
    #         for led in group:
    #             off(led[0])

    #     for group in xs:
    #         for led in group:
    #             on(led[0], rcolor())
    #             # on(led[0], '#aa4400ff')

    #     for group in xs:
    #         for led in group:
    #             off(led[0])
# print(read_coors())
on_sorted()

# print(read_coors())
on_sorted()

